#P3 code
ip_address = 'localhost' # Enter your IP Address here
project_identifier = 'P3A' # Enter the project identifier i.e. P2A or P2B

# SERVO TABLE CONFIGURATION
short_tower_angle = 315 # enter the value in degrees for the identification tower 
tall_tower_angle = 90 # enter the value in degrees for the classification tower
drop_tube_angle = 180 # enter the value in degrees for the drop tube. clockwise rotation from zero degrees

# BIN CONFIGURATION
# Configuration for the colors for the bins and the lines leading to those bins.
# Note: The line leading up to the bin will be the same color as the bin 

bin1_offset = 0.15 # offset in meters
bin1_color = [1, 0, 0] # e.g. [1,0,0] for red
bin1_metallic = False

bin2_offset = 0.15
bin2_color = [0, 1, 0]
bin2_metallic = False

bin3_offset = 0.15
bin3_color = [0, 0, 1]
bin3_metallic = False

bin4_offset = 0.15
bin4_color = [1, 0, 1]
bin4_metallic = False
#--------------------------------------------------------------------------------
import sys
sys.path.append('../')
from Common.simulation_project_library import *

hardware = False
if project_identifier == 'P3A':
    table_configuration = [short_tower_angle,tall_tower_angle,drop_tube_angle]
    configuration_information = [table_configuration, None] # Configuring just the table
    QLabs = configure_environment(project_identifier, ip_address, hardware,configuration_information).QLabs
    table = servo_table(ip_address,QLabs,table_configuration,hardware)
    arm = qarm(project_identifier,ip_address,QLabs,hardware)
else:
    table_configuration = [short_tower_angle,tall_tower_angle,drop_tube_angle]
    bin_configuration = [[bin1_offset,bin2_offset,bin3_offset,bin4_offset],[bin1_color,bin2_color,bin3_color,bin4_color],[bin1_metallic,bin2_metallic, bin3_metallic,bin4_metallic]]
    configuration_information = [table_configuration, bin_configuration]
    QLabs = configure_environment(project_identifier, ip_address, hardware,configuration_information).QLabs
    table = servo_table(ip_address,QLabs,table_configuration,hardware)
    arm = qarm(project_identifier,ip_address,QLabs,hardware)
    bot = qbot(0.1,ip_address,QLabs,project_identifier,hardware)
#--------------------------------------------------------------------------------
# STUDENT CODE BEGINS
#---------------------------------------------------------------------------------
container=0
mass_binlist= [["apple", 0,0],["apple", 9.25,3],["apple", 15,1],["apple", 10,2],["apple", 22.469,4],["apple", 26.649,1],["apple", 29.281,4]]
initial_position = bot.position()
def dispense_container():
    global container
    global mass_binlist
    container= random.randint(1,6)
    container_info= table.dispense_container(container, True)
    mass_binlist[container]
    
    return None

def bottle_load(spot_num):
    time.sleep(3)
    arm.move_arm(0.64,0,0.23) #pickup position
    time.sleep(3)
    arm.control_gripper(40)
    time.sleep(3)
    arm.move_arm(0.012,-0.376, 0.621) #spot before loading
    time.sleep(3)
    if spot_num==1:
        arm.move_arm(0.012,-0.637,0.531) #1st load spot
        time.sleep(3)
    elif spot_num==2:
        arm.move_arm(0.012,-0.521,0.498) #2nd load spot
        time.sleep(3)
    elif spot_num==3:
        arm.move_arm(0.012,-0.462,0.478) #3rd load spot
        time.sleep(3)
    arm.control_gripper(-40)
    time.sleep(3)
    arm.move_arm(0,-0.376, 0.621) #back to to spot before loading
    time.sleep(3)
    arm.home()

def can_load(spot_num):
    time.sleep(3)
    arm.move_arm(0.64,0,0.23) #pickup position
    time.sleep(3)
    arm.control_gripper(40)
    time.sleep(3)
    arm.move_arm(0.012,-0.376, 0.621) #spot before loading
    time.sleep(3)
    if spot_num==1:
        arm.move_arm(0.012,-0.621,0.562) #1st load spot
        time.sleep(3)
    elif spot_num==2:
        arm.move_arm(0.012,-0.521,0.498) #2nd load spot
        time.sleep(3)
    elif spot_num==3:
        arm.move_arm(0.012,-0.462,0.478) #3rd load spot
        time.sleep(3)
    arm.control_gripper(-40)
    time.sleep(3)
    arm.move_arm(0,-0.376, 0.621) #back to to spot before loading
    time.sleep(3)
    arm.home()




def load_container():
    global container
    global mass_binlist
    p_container=0 #value for previous container
    total_weight=0
    num_containers=0 #to keep count of how many containers get loaded
    counter=True

    while counter==True: 
        dispense_container()
        total_weight += mass_binlist[container][1]
        if container==2 or container==5:
            if num_containers==0:
                #then just load it at 1st spot
                #and update p_container
                can_load(1)

                p_container=container
                num_containers+=1

            elif num_containers==1:
                if total_weight>90 or p_container!=container:
                    #stop the loading
                    counter= False
                else:
                    #load it at spot 2
                    can_load(2)
                    p_container=container
                    num_containers+=1

            elif num_containers==2:
                if total_weight>90 or p_container!=container:
                    #stop the loading 
                    counter= False
                else:   
                    #load at spot 3
                    can_load(3)
                    p_container=container
                    num_containers+=1
        else:
            if num_containers==0:
                #then just load it at 1st spot
                #and update p_container
                bottle_load(1)
                p_container=container
                num_containers+=1

            elif num_containers==1:
                if total_weight>90 or p_container!=container:
                    #stop the loading
                    counter= False
                else:
                    #load it at spot 2
                    bottle_load(2)
                    p_container=container
                    num_containers+=1

            elif num_containers==2:
                if total_weight>90 or p_container!=container:
                    #stop the loading 
                    counter= False
                else:   
                    #load at spot 3
                    bottle_load(3)
                    p_container=container
                    num_containers+=1
    
    return p_container

#code to make the q-bot drive and stay on the track
def drive_Qbot():

    line_reading = bot.line_following_sensors()

    if line_reading == [1, 1]:
        bot.set_wheel_speed([0.1,0.1])

    #if it is no longer on the track, it will turn back onto it
    if line_reading == [1, 0]:
        while line_reading == [1, 0]:
            bot.set_wheel_speed([0,0.1])
            line_reading = bot.line_following_sensors()

        bot.set_wheel_speed([0.1,0.1])

    if line_reading == [0, 1]:
        while line_reading == [0, 1]:
            bot.set_wheel_speed([0.1,0])
            line_reading = bot.line_following_sensors()

        bot.set_wheel_speed([0.1,0.1])

    return None
        
def transfer_container(bin_num):
    global mass_binlist
    global container
    global bin1_color
    global bin2_color
    global bin3_color
    global bin4_color

    bin = mass_binlist[bin_num][2]
    #creates a variable that containes the colour values of the bin
    if bin == 1:
        colour_of_bin = bin1_color
    elif bin == 2:
        colour_of_bin = bin2_color
    elif bin == 3:
        colour_of_bin = bin3_color
    else:
        colour_of_bin = bin4_color

    #stores whether the bot has unloaded or not
    colour_sensing = True

    bot.activate_color_sensor()
    bot.activate_line_following_sensor()

    #this will run until the correct bin has been sensed
    while colour_sensing:

        drive_Qbot()

        current_colour_reading = bot.read_color_sensor()

        #when the colour sensor determines it has become in range of the bin
        if current_colour_reading[0] == colour_of_bin:
            bot.deactivate_color_sensor()
            bot.activate_ultrasonic_sensor()
            colour_sensing = False
            ultrasonic_sensing = True

    #this will run until recyclables are ready to be dumped
    while ultrasonic_sensing:

        drive_Qbot()

        current_distance = bot.read_ultrasonic_sensor()

        #when the bot has reached the dropoff point
        if 0 < current_distance < 0.075:
            bot.stop()
            ultrasonic_sensing = False

    bot.deactivate_line_following_sensor()
    bot.deactivate_ultrasonic_sensor()
    return None


def deposit_container():
    time.sleep(1)
    bot.activate_stepper_motor()
    time.sleep(2)
    bot.rotate_hopper(50)
    time.sleep(2)
    bot.rotate_hopper(0)
    time.sleep(1)
    bot.deactivate_stepper_motor()
   
    return None

def return_home():

    bot.activate_line_following_sensor()

    while bot.position() != (1.500001072883606, -1.095026709663216e-05, 0.0007550716400146484):

        drive_Qbot()

    bot.deactivate_line_following_sensor()

    return None

def main():

    while True:
        #dispense_container()
        a= load_container()
        transfer_container(a)
        deposit_container()
        return_home()
    return None


main()


#---------------------------------------------------------------------------------
# STUDENT CODE ENDS
#---------------------------------------------------------------------------------
    

    

